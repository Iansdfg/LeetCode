# import collections
# class Solution(object):
#     def ladderLength(self, beginWord, endWord, wordList):
#         """
#         :type beginWord: str
#         :type endWord: str
#         :type wordList: List[str]
#         :rtype: int
#         """
#
#         wordset = set(wordList)
#         bfs = collections.deque()
#         bfs.append((beginWord, 1))
#         # print(bfs)
#         while bfs:
#             word, level = bfs.popleft()
#             if word == endWord:
#                 return level
#             for i in range(len(word)):
#                 for c in "abcdefghijklmnopqrstuvwxyz":
#                     newWord = word[:i]+c+word[i+1:]
#                     if newWord in wordset and newWord != word:
#                         wordset.remove(newWord)
#                         bfs.append((newWord,level+1))
#         return 0
import string
class Solution(object):
    def ladderLength(self, beginWord, endWord, wordList):
        """
        :type beginWord: str
        :type endWord: str
        :type wordList: List[str]
        :rtype: int
        """
        wordSet = set(wordList)
        if endWord not in wordSet:
            return 0
        beginSet = {beginWord}
        endSet = {endWord}
        charSet = set(string.ascii_lowercase)
        word_len = len(beginWord)
        ladder_len = 2

        while beginSet:
            if len(beginSet) > len(endSet):
                beginSet, endSet = endSet, beginSet
            nextSet = set()
            for word in beginSet:
                for i in range(word_len):
                    for char in charSet:
                        newWord = word[:i] + char + word[i + 1:]
                        if newWord in endSet:
                            return ladder_len
                        if newWord in wordSet:
                            nextSet.add(newWord)
                            wordSet.remove(newWord)
            beginSet = nextSet
            ladder_len += 1
        return 0


def execute():
    sol = Solution()
    beginWord = "hit"
    endWord = "cog"
    wordList = ["hot", "dot", "dog", "lot", "log", "cog"]
    # beginWord = "qa"
    # endWord = "sq"
    # wordList = ["si","go","se","cm","so","ph","mt","db","mb","sb","kr","ln","tm","le","av","sm","ar","ci","ca","br","ti","ba","to","ra","fa","yo","ow","sn","ya","cr","po","fe","ho","ma","re","or","rn","au","ur","rh","sr","tc","lt","lo","as","fr","nb","yb","if","pb","ge","th","pm","rb","sh","co","ga","li","ha","hz","no","bi","di","hi","qa","pi","os","uh","wm","an","me","mo","na","la","st","er","sc","ne","mn","mi","am","ex","pt","io","be","fm","ta","tb","ni","mr","pa","he","lr","sq","ye"]
    print(sol.ladderLength(beginWord, endWord, wordList))
if __name__ == '__main__':
    execute()

