class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        stack = []
        for token in tokens:
            if token.isdigit():
                stack.append(int(token))
            elif token[0] == '-' and len(token) > 1:
                stack.append(-1 * int(token[1:]))
            else:
                top = stack.pop()
                sec = stack.pop()
                if token == '+':
                    res = sec+top
                elif token == '-':
                    res = sec - top
                elif token == '*':
                    res = sec * top
                elif token == '/':
                    if top * sec < 0:
                        res = -((-sec) // top)
                    else:
                        res = sec // top
                stack.append(res)
            # print(stack)
        return stack[-1]


def execute():
    tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
    sol = Solution()
    print(sol.evalRPN(tokens))


if __name__ == '__main__':
    execute()

